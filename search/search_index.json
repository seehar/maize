{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u7b80\u4ecb\u53ca\u5b89\u88c5","text":"<p>maize \u662f\u4e00\u4e2a\u57fa\u4e8e\u5f02\u6b65\uff0c\u8f7b\u91cf\u7ea7 Python \u722c\u866b\u6846\u67b6</p>"},{"location":"#_2","title":"\u73af\u5883\u8981\u6c42","text":"<ul> <li>Python 3.10+</li> <li>Linux, Windows, macOS</li> </ul>"},{"location":"#_3","title":"\u5b89\u88c5","text":"pippoetry <pre><code>pip install maize\n</code></pre> <pre><code>poetry add maize\n</code></pre>"},{"location":"quick_start/","title":"\u5feb\u901f\u4e0a\u624b","text":""},{"location":"quick_start/#spider","title":"\u521b\u5efa spider","text":"<p>\u4ee5\u767e\u5ea6\u722c\u866b\u4e3a\u4f8b\uff0c\u5b9e\u73b0\u4e00\u4e2a\u6700\u5c0f\u7684\u722c\u866b\u9879\u76ee</p> <pre><code>import asyncio\nfrom maize import CrawlerProcess, Spider\n\n\nclass BaiduSpider(Spider):\n    start_urls = [\"http://www.baidu.com\"]\n\n    async def parse(self, response):\n        print(f\"parse: {response}\")\n\n\nasync def run():\n    process = CrawlerProcess()\n    await process.crawl(BaiduSpider)\n    await process.start()\n\n\nif __name__ == '__main__':\n    asyncio.run(run())\n</code></pre>"},{"location":"quick_start/#_2","title":"\u4e0b\u53d1\u65b0\u4efb\u52a1","text":"<p><code>parse</code> \u4e2d\u652f\u6301\u4e0b\u53d1\u65b0\u4efb\u52a1\uff0c\u53ea\u9700\u8981 <code>yield Request</code> \u5373\u53ef\u3002\u793a\u4f8b\u5982\u4e0b</p> <pre><code>from maize import Request\n\nasync def parse(self, response):\n    yield Request(url=\"url\")  # \u4e0d\u6307\u5b9a callback\uff0c\u4efb\u52a1\u4f1a\u9ed8\u8ba4\u8c03\u5ea6\u5230 parse \u4e0a\n    yield Request(url=\"url\", callback=self.parse_page)  # \u6307\u5b9a callback\uff0c\u4efb\u52a1\u7531 callback \u6307\u5b9a\u7684\u51fd\u6570\u89e3\u6790\u3002\u6ce8\u610f\uff0c\u9700\u8981\u5f02\u6b65\u51fd\u6570\n</code></pre>"},{"location":"quick_start/#_3","title":"\u722c\u866b\u914d\u7f6e","text":"<p>\u722c\u866b\u914d\u7f6e\u652f\u6301\u81ea\u5b9a\u4e49\u914d\u7f6e\u6216\u5f15\u5165\u914d\u7f6e\u6587\u4ef6setting.py\u7684\u65b9\u5f0f\u3002 \u914d\u7f6e\u6587\u4ef6\uff1a\u5728\u5de5\u4f5c\u533a\u95f4\u7684\u6839\u76ee\u5f55\u4e0b\u5f15\u5165setting.py\uff0c\u5177\u4f53\u53c2\u8003\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6</p> <pre><code>spider\n    baidu_spider.py\n    ...\nsettings.py  # \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u914d\u7f6e\u6587\u4ef6\u9700\u4e0e run.py \u540c\u7ea7\u522b\nrun.py\n</code></pre> <p>\u81ea\u5b9a\u4e49\u914d\u7f6e\uff1a\u4f7f\u7528\u7c7b\u53d8\u91cf <code>custom_settings</code></p> <pre><code>class BaiduSpider(Spider):\n    custom_settings = {  # \u81ea\u5b9a\u4e49\u914d\u7f6e\n        \"CONCURRENCY\": 1,  # \u5e76\u53d1\u6570\n    }\n</code></pre> <p>\u914d\u7f6e\u4f18\u5148\u7ea7\uff1a\u81ea\u5b9a\u4e49\u914d\u7f6e &gt; \u914d\u7f6e\u6587\u4ef6\uff0c\u5373\u81ea\u5b9a\u4e49\u914d\u7f6e\u4f1a\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u4e0d\u8fc7\u81ea\u5b9a\u4e49\u914d\u7f6e\u53ea\u5bf9\u81ea\u5df1\u6709\u6548\uff0c\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u662f\u591a\u4e2a\u722c\u866b\u516c\u7528\u7684</p>"},{"location":"quick_start/#_4","title":"\u52a0\u5feb\u91c7\u96c6","text":"<p>\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5e76\u53d1\u6570 <code>CONCURRENCY</code> \u5373\u53ef</p>"},{"location":"quick_start/#_5","title":"\u81ea\u5b9a\u4e49\u4e0b\u8f7d\u5668","text":"<p>\u5185\u7f6e\u57fa\u4e8e <code>aiohttp</code> \u548c <code>httpx</code> \u7684\u4e24\u79cd\u4e0b\u8f7d\u5668\u3002\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fee\u6539</p> <pre><code>DOWNLOADER = \"maize.AioHttpDownloader\"  # \u57fa\u4e8e aiohttp \u7684\u4e0b\u8f7d\u5668\nDOWNLOADER = \"maize.HTTPXDownloader\"    # \u57fa\u4e8e httpx \u7684\u4e0b\u8f7d\u5668\n</code></pre> <p>\u4e0b\u8f7d\u5668\u662f\u63d2\u62d4\u5f0f\u7684\u8bbe\u8ba1\uff0c\u60a8\u53ef\u4ee5\u5f88\u5bb9\u6613\u66ff\u6362\u4e3a\u81ea\u5b9a\u4e49\u7684\u4e0b\u8f7d\u5668\u3002\u7ee7\u627f <code>BaseDownloader</code> \u5b9e\u73b0 <code>download</code> \u548c <code>structure_response</code> \u4e24\u4e2a\u65b9\u6cd5\u3002 \u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 <code>DOWNLOADER</code> \u7684\u8def\u5f84\u66ff\u6362\u4e3a\u60a8\u81ea\u5b9a\u4e49\u4e0b\u8f7d\u5668\u7684\u8def\u5f84\u3002\u793a\u4f8b\uff1a</p> <pre><code>import typing\n\nfrom maize import BaseDownloader, Request, Response\n\n\nclass CustomDownloader(BaseDownloader):\n\n    async def download(self, request: Request) -&gt; typing.Optional[Response]:\n        pass\n\n    @staticmethod\n    def structure_response(request: Request, response: typing.Any, body: bytes) -&gt; Response:\n        pass\n</code></pre> <p>\u60a8\u4e5f\u53ef\u4ee5\u4e0d\u7ee7\u627f <code>BaseDownloader</code>\uff0c\u9700\u8981\u5728\u81ea\u5b9a\u4e49\u4e0b\u8f7d\u5668\u4e2d\u5b9e\u73b0\u8fd9\u51e0\u4e2a\u65b9\u6cd5\uff1a<code>fetch</code>, <code>download</code>, <code>create_instance</code>, <code>close</code>, <code>idle</code>\u3002 \u4f46\u662f\u6211\u4eec\u5efa\u8bae\u60a8\u7ee7\u627f <code>BaeDownloader</code> \u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u4e0b\u8f7d\u5668</p>"},{"location":"quick_start/#_6","title":"\u81ea\u5b9a\u4e49\u65e5\u5fd7\u6a21\u5757","text":"<p><code>maize</code> \u7684\u65e5\u5fd7\u9ed8\u8ba4\u4f7f\u7528 <code>Python</code> \u81ea\u5e26\u7684 <code>logging</code> \u6a21\u5757\u3002 \u4f46\u662f\u60a8\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u66ff\u6362\u4e3a\u60a8\u60f3\u7528\u7684\u65e5\u5fd7\u6a21\u5757\uff0c\u6bd4\u5982 <code>loguru</code>\u3002\u793a\u4f8b\uff1a</p> <pre><code>import logging\nimport sys\n\nfrom loguru import logger as loguru_logger\n\n\nclass InterceptHandler(logging.Handler):\n    def __init__(self):\n        super().__init__()\n        self.logger = loguru_logger\n        self.logger.remove()\n        self.logger.add(\n            sys.stdout,\n            level=\"DEBUG\",\n            format=\"&lt;green&gt;{time:YYYY-MM-DD HH:mm:ss.SSS}&lt;/green&gt; | \"  # \u989c\u8272&gt;\u65f6\u95f4\n            \"{process.name} | \"  # \u8fdb\u7a0b\u540d\n            \"{thread.name} | \"  # \u8fdb\u7a0b\u540d\n            \"&lt;cyan&gt;{module}&lt;/cyan&gt;.&lt;cyan&gt;{function}&lt;/cyan&gt;\"  # \u6a21\u5757\u540d.\u65b9\u6cd5\u540d\n            \":&lt;cyan&gt;{line}&lt;/cyan&gt; | \"  # \u884c\u53f7\n            \"&lt;level&gt;{level}&lt;/level&gt;: \"  # \u7b49\u7ea7\n            \"&lt;level&gt;{message}&lt;/level&gt;\",  # \u65e5\u5fd7\u5185\u5bb9\n        )\n\n    def emit(self, record: logging.LogRecord):\n        logger_opt = self.logger.opt(depth=7, exception=record.exc_info)\n        logger_opt.log(record.levelno, record.getMessage())\n</code></pre> <p>\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u60a8\u7684\u65e5\u5fd7\u6a21\u5757</p> <pre><code>LOGGER_HANDLER = \"the.logger.path.InterceptHandler\"  # \u8bf7\u66ff\u6362\u4e3a\u5b9e\u9645\u8def\u5f84\n</code></pre>"}]}